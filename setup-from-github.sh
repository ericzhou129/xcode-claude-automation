#!/usr/bin/env bash
# Setup Xcode + Claude Code automation from GitHub

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# GitHub repository URL (update this when you publish to GitHub)
GITHUB_REPO="https://raw.githubusercontent.com/ericzhou129/xcode-claude-automation/main"

echo -e "${BLUE}🚀 Setting up Xcode + Claude Code automation from GitHub...${NC}"
echo ""

# Check if we're in an Xcode project directory
if [ ! -f "*.xcodeproj" ] && [ ! -f "*.xcworkspace" ] && [ ! -d "*.xcodeproj" ] && [ ! -d "*.xcworkspace" ]; then
    echo -e "${YELLOW}⚠️  No Xcode project found in current directory.${NC}"
    echo -e "${YELLOW}   Are you in your Xcode project root?${NC}"
    echo ""
    read -p "Continue anyway? (y/n): " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Download essential files from GitHub
echo -e "${BLUE}📥 Downloading automation files from GitHub...${NC}"

# List of essential files to download
FILES=(
    "build.sh"
    "filter.py"
    "fix.sh"
    "watch.sh"
    "monitor.sh"
    "install-git-hook.sh"
    "config.sh"
)

# Create temp directory for downloads
TEMP_DIR=$(mktemp -d)
trap 'rm -rf "$TEMP_DIR"' EXIT

# Download each file
for file in "${FILES[@]}"; do
    echo -n "Downloading $file... "
    if curl -sL "$GITHUB_REPO/essential-files/$file" -o "$TEMP_DIR/$file"; then
        echo -e "${GREEN}✓${NC}"
    else
        echo -e "${RED}✗${NC}"
        echo -e "${RED}Failed to download $file${NC}"
        exit 1
    fi
done

# Copy files to current directory
echo -e "${BLUE}📁 Installing automation files...${NC}"
cp "$TEMP_DIR"/* .

# Make scripts executable
chmod +x *.sh *.py

echo -e "${GREEN}✅ Files installed successfully!${NC}"
echo ""

# Detect project details
echo -e "${BLUE}🔍 Detecting project configuration...${NC}"

# Find project/workspace files
XCODEPROJ=$(find . -maxdepth 1 -name "*.xcodeproj" -type d | head -1)
XCWORKSPACE=$(find . -maxdepth 1 -name "*.xcworkspace" -type d | head -1)
PROJECT_NAME=$(basename "$PWD")

# Try to detect scheme
DETECTED_SCHEME=""
if [ -n "$XCWORKSPACE" ]; then
    DETECTED_SCHEME=$(basename "$XCWORKSPACE" .xcworkspace)
elif [ -n "$XCODEPROJ" ]; then
    DETECTED_SCHEME=$(basename "$XCODEPROJ" .xcodeproj)
else
    DETECTED_SCHEME="$PROJECT_NAME"
fi

echo -e "${GREEN}📱 Project: $PROJECT_NAME${NC}"
echo -e "${GREEN}🔧 Detected scheme: $DETECTED_SCHEME${NC}"
if [ -n "$XCWORKSPACE" ]; then
    echo -e "${GREEN}📦 Workspace: $(basename "$XCWORKSPACE")${NC}"
elif [ -n "$XCODEPROJ" ]; then
    echo -e "${GREEN}📦 Project: $(basename "$XCODEPROJ")${NC}"
fi
echo ""

# Interactive configuration
echo -e "${BLUE}⚙️  Configuration:${NC}"
echo ""

# Scheme
read -p "Enter scheme name [$DETECTED_SCHEME]: " USER_SCHEME
SCHEME=${USER_SCHEME:-$DETECTED_SCHEME}

# Destination
echo "Select destination:"
echo "1) iOS (generic/platform=iOS)"
echo "2) macOS (generic/platform=macOS)"
echo "3) Custom"
read -p "Choice [1]: " DEST_CHOICE
DEST_CHOICE=${DEST_CHOICE:-1}

case $DEST_CHOICE in
    1)
        DESTINATION="generic/platform=iOS"
        ;;
    2)
        DESTINATION="generic/platform=macOS"
        ;;
    3)
        read -p "Enter custom destination: " DESTINATION
        ;;
    *)
        DESTINATION="generic/platform=iOS"
        ;;
esac

# Write configuration
echo -e "${BLUE}📝 Writing configuration...${NC}"

cat > config.sh << EOF
#!/usr/bin/env bash
# Configuration for $PROJECT_NAME
# Generated by setup-from-github.sh on $(date)

# Project settings
export SCHEME="$SCHEME"
export DESTINATION="$DESTINATION"
export CONFIGURATION="Debug"
export BUILD_TYPE="build"

EOF

# Add workspace/project setting
if [ -n "$XCWORKSPACE" ]; then
    echo "export WORKSPACE=\"$(basename "$XCWORKSPACE")\"" >> config.sh
elif [ -n "$XCODEPROJ" ]; then
    echo "export PROJECT=\"$(basename "$XCODEPROJ")\"" >> config.sh
fi

cat >> config.sh << 'EOF'

# Automation settings
export AUTO_COMMIT="false"
export VERBOSE="false"
export MONITOR_INTERVAL="30"
export DEBOUNCE_TIME="2"

echo "Configuration loaded for $SCHEME"
EOF

chmod +x config.sh

# Update or create CLAUDE.md
if [ -f "CLAUDE.md" ]; then
    echo -e "${BLUE}📄 Adding automation section to existing CLAUDE.md...${NC}"
    cat >> CLAUDE.md << EOF

## Build Automation
This project uses automated Xcode build error detection and fixing.

### Commands
- \`./fix.sh\` - Manual build check and error analysis
- \`./watch.sh\` - Auto-run when files change (recommended)
- \`./install-git-hook.sh\` - Check builds on git commits

### Workflow
1. Start file watcher: \`./watch.sh\`
2. Code in Xcode as normal
3. Save files → automatic build check
4. Build errors → Claude Code provides fixes
5. Apply fixes → continue coding

### Setup Date
$(date)
EOF
else
    echo -e "${BLUE}📄 Creating CLAUDE.md...${NC}"
    cat > CLAUDE.md << EOF
# $PROJECT_NAME

## Build Automation
This project uses automated Xcode build error detection and fixing.

### Commands
- \`./fix.sh\` - Manual build check and error analysis
- \`./watch.sh\` - Auto-run when files change (recommended)
- \`./install-git-hook.sh\` - Check builds on git commits

### Workflow
1. Start file watcher: \`./watch.sh\`
2. Code in Xcode as normal
3. Save files → automatic build check
4. Build errors → Claude Code provides fixes
5. Apply fixes → continue coding

### Setup Date
$(date)
EOF
fi

echo -e "${GREEN}✅ Setup complete!${NC}"
echo ""
echo -e "${YELLOW}🎯 Next steps:${NC}"
echo "1. Start file watcher: ${GREEN}./watch.sh${NC}"
echo "2. Or run manual check: ${GREEN}./fix.sh${NC}"
echo "3. Install git hooks: ${GREEN}./install-git-hook.sh${NC}"
echo ""
echo -e "${GREEN}🎉 Ready for automated Xcode + Claude Code development!${NC}"